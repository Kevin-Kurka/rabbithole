name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: ankane/pgvector:v0.5.1
        env:
          POSTGRES_DB: rabbithole_test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      rabbitmq:
        image: rabbitmq:3.13-management-alpine
        env:
          RABBITMQ_DEFAULT_USER: admin
          RABBITMQ_DEFAULT_PASS: admin
          RABBITMQ_DEFAULT_VHOST: /
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/rabbithole_test_db
      REDIS_URL: redis://localhost:6379
      RABBITMQ_URL: amqp://admin:admin@localhost:5672
      NODE_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Initialize test database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d rabbithole_test_db < init.sql
        continue-on-error: true

      - name: Run backend tests
        working-directory: ./backend
        run: npm test -- --ci --maxWorkers=2

      - name: Generate coverage report
        working-directory: ./backend
        run: npm run test:coverage -- --ci --maxWorkers=2

      - name: Check coverage thresholds
        working-directory: ./backend
        run: |
          COVERAGE=$(node -p "
            const coverage = require('./coverage/coverage-summary.json');
            const statements = coverage.total.statements.pct;
            const branches = coverage.total.branches.pct;
            const functions = coverage.total.functions.pct;
            const lines = coverage.total.lines.pct;
            console.log('Statements:', statements + '%');
            console.log('Branches:', branches + '%');
            console.log('Functions:', functions + '%');
            console.log('Lines:', lines + '%');

            if (statements < 60 || branches < 60 || functions < 60 || lines < 60) {
              console.error('Coverage below 60% threshold!');
              process.exit(1);
            }
          ")
          echo "$COVERAGE"
        continue-on-error: false

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload backend coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage/
          retention-days: 7

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:4000/graphql
          NEXTAUTH_SECRET: test-secret

      - name: Run frontend tests
        working-directory: ./frontend
        run: |
          # Add test command when frontend tests are implemented
          echo "Frontend tests will be added in future milestone"
          # npm test -- --ci --maxWorkers=2
        continue-on-error: true

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: ankane/pgvector:v0.5.1
        env:
          POSTGRES_DB: rabbithole_test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      rabbitmq:
        image: rabbitmq:3.13-management-alpine
        env:
          RABBITMQ_DEFAULT_USER: admin
          RABBITMQ_DEFAULT_PASS: admin
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Start backend server
        working-directory: ./backend
        run: |
          npm ci
          npm run build
          npm start &
          sleep 10
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/rabbithole_test_db
          REDIS_URL: redis://localhost:6379
          RABBITMQ_URL: amqp://admin:admin@localhost:5672

      - name: Run integration tests
        run: |
          # Placeholder for E2E tests with Playwright
          echo "Integration tests will be added in future milestone"
        continue-on-error: true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests]
    if: always()

    steps:
      - name: Download backend coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: coverage/
        continue-on-error: true

      - name: Test Results Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Tests: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "coverage/coverage-summary.json" ]; then
            echo "### Backend Coverage" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
