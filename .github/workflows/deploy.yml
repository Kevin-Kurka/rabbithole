name: Deploy

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: github.ref == 'refs/heads/main'

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/rabbithole-api
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ secrets.DOCKER_USERNAME }}/rabbithole-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ secrets.DOCKER_USERNAME }}/rabbithole-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.rabbithole.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS (Staging)
        run: |
          echo "Deploying to staging environment..."
          # Update ECS task definition with new image
          aws ecs update-service \
            --cluster rabbithole-staging \
            --service api-service \
            --force-new-deployment \
            --desired-count 1

          aws ecs update-service \
            --cluster rabbithole-staging \
            --service frontend-service \
            --force-new-deployment \
            --desired-count 1

          echo "Deployment triggered. Waiting for services to stabilize..."
          aws ecs wait services-stable \
            --cluster rabbithole-staging \
            --services api-service frontend-service

      - name: Run database migrations (Staging)
        run: |
          echo "Running database migrations..."
          # Execute migration task
          TASK_ARN=$(aws ecs run-task \
            --cluster rabbithole-staging \
            --task-definition rabbithole-migrations \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-xxx],securityGroups=[sg-xxx],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)

          echo "Migration task: $TASK_ARN"
          aws ecs wait tasks-stopped --cluster rabbithole-staging --tasks $TASK_ARN

      - name: Verify deployment
        run: |
          echo "Verifying staging deployment..."
          HEALTH_CHECK_URL="https://staging-api.rabbithole.app/health"
          for i in {1..10}; do
            if curl -f -s $HEALTH_CHECK_URL > /dev/null; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 10s..."
            sleep 10
          done
          echo "Health check failed after 10 attempts"
          exit 1

      - name: Notify deployment
        if: always()
        run: |
          echo "## Staging Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: Staging" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- URL: https://staging.rabbithole.app" >> $GITHUB_STEP_SUMMARY

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://rabbithole.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1

      - name: Create backup
        run: |
          echo "Creating database backup before deployment..."
          BACKUP_NAME="rabbithole-backup-$(date +%Y%m%d-%H%M%S)"
          aws rds create-db-snapshot \
            --db-instance-identifier rabbithole-prod \
            --db-snapshot-identifier $BACKUP_NAME
          echo "Backup created: $BACKUP_NAME"

      - name: Blue-Green Deployment Strategy
        run: |
          echo "Starting blue-green deployment..."

          # Get current (blue) task definition
          CURRENT_TASK_DEF=$(aws ecs describe-services \
            --cluster rabbithole-production \
            --services api-service \
            --query 'services[0].taskDefinition' \
            --output text)

          echo "Current task definition: $CURRENT_TASK_DEF"

          # Create new (green) task definition with new image
          NEW_TASK_DEF=$(aws ecs register-task-definition \
            --cli-input-json file://ecs-task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "New task definition: $NEW_TASK_DEF"

          # Update service with new task definition
          aws ecs update-service \
            --cluster rabbithole-production \
            --service api-service \
            --task-definition $NEW_TASK_DEF \
            --desired-count 3 \
            --deployment-configuration "maximumPercent=200,minimumHealthyPercent=100"

          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster rabbithole-production \
            --services api-service

      - name: Run database migrations (Production)
        run: |
          echo "Running production database migrations..."
          TASK_ARN=$(aws ecs run-task \
            --cluster rabbithole-production \
            --task-definition rabbithole-migrations \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-prod],securityGroups=[sg-prod],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)

          echo "Migration task: $TASK_ARN"
          aws ecs wait tasks-stopped --cluster rabbithole-production --tasks $TASK_ARN

      - name: Smoke tests
        run: |
          echo "Running smoke tests..."
          HEALTH_CHECK_URL="https://api.rabbithole.app/health"

          # Health check
          if ! curl -f -s $HEALTH_CHECK_URL > /dev/null; then
            echo "Health check failed!"
            exit 1
          fi

          # GraphQL endpoint check
          GRAPHQL_URL="https://api.rabbithole.app/graphql"
          RESPONSE=$(curl -s -X POST $GRAPHQL_URL \
            -H "Content-Type: application/json" \
            -d '{"query":"{ __typename }"}')

          if echo $RESPONSE | grep -q "Query"; then
            echo "GraphQL endpoint is healthy"
          else
            echo "GraphQL endpoint check failed"
            exit 1
          fi

          echo "All smoke tests passed!"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed! Rolling back..."
          aws ecs update-service \
            --cluster rabbithole-production \
            --service api-service \
            --task-definition $CURRENT_TASK_DEF \
            --force-new-deployment

          echo "Rollback initiated"

      - name: Update CloudWatch dashboard
        if: success()
        run: |
          echo "Updating CloudWatch dashboard with new deployment..."
          # Add deployment marker to dashboard
          aws cloudwatch put-metric-data \
            --namespace RabbitHole/Deployments \
            --metric-name DeploymentCount \
            --value 1 \
            --dimensions Environment=production,Version=${{ github.sha }}

      - name: Notify deployment
        if: always()
        run: |
          echo "## Production Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: Production" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- URL: https://rabbithole.app" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ job.status }}" == "success" ]; then
            echo ":rocket: Deployment successful!" >> $GITHUB_STEP_SUMMARY
          else
            echo ":x: Deployment failed - rollback initiated" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Send Slack notification
        if: always()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "Production Deployment ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment*\n• Status: ${{ job.status }}\n• Commit: ${{ github.sha }}\n• Branch: ${{ github.ref_name }}\n• Actor: ${{ github.actor }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
